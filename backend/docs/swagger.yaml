basePath: /api/v1
definitions:
  dto.EndpointCreate:
    properties:
      description:
        example: creates new user and return access token
        type: string
      details:
        additionalProperties: {}
        type: object
      method:
        enum:
        - GET
        - POST
        - PUT
        - PATCH
        - DELETE
        example: POST
        type: string
      name:
        example: user sign-up endpoint
        type: string
      path:
        example: /user/sign-up
        type: string
    required:
    - method
    - name
    - path
    type: object
  dto.HttpErr:
    properties:
      err:
        example: some err description
        type: string
    required:
    - err
    type: object
  dto.OkResponse:
    properties:
      status:
        example: ok
        type: string
    required:
    - status
    type: object
  dto.ProjectCreate:
    properties:
      description:
        example: simple team project managing tool
        type: string
      name:
        example: Project Syntegra
        type: string
    required:
    - description
    - name
    type: object
  dto.ProjectEdit:
    properties:
      description:
        example: simple team project managing tool
        type: string
      name:
        example: Project Syntegra
        type: string
    type: object
  dto.ProjectMember:
    properties:
      member_id:
        example: member_id
        type: string
      name:
        example: msa
        type: string
    required:
    - member_id
    - name
    type: object
  dto.ProjectView:
    properties:
      project_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        format: uuid
        type: string
      project_name:
        example: Project Syntegra
        type: string
    required:
    - project_id
    - project_name
    type: object
  dto.ServiceCreate:
    properties:
      name:
        example: user
        type: string
      project_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        format: uuid
        type: string
    required:
    - name
    - project_id
    type: object
  dto.UserAuthResponse:
    properties:
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        format: uuid
        type: string
      token:
        type: string
    required:
    - id
    - token
    type: object
  dto.UserLogin:
    properties:
      email:
        example: yoyoyo@femail.ru
        type: string
      password:
        example: qwerty234sraiekvaroisehw{}$
        type: string
    required:
    - email
    - password
    type: object
host: localhost:3000
info:
  contact: {}
  title: Syntegra backend
  version: "1.0"
paths:
  /project:
    patch:
      consumes:
      - application/json
      parameters:
      - description: edit project info
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectEdit'
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProjectView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HttpErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HttpErr'
      security:
      - Bearer: []
      summary: edit existing project
      tags:
      - project
    post:
      consumes:
      - application/json
      parameters:
      - description: create new project for authenticated user
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectCreate'
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HttpErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HttpErr'
      security:
      - Bearer: []
      summary: create new project
      tags:
      - project
  /project/{project_id}/contributors:
    get:
      parameters:
      - description: Project id
        in: path
        name: project_id
        required: true
        type: string
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ProjectMember'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HttpErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HttpErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.HttpErr'
      security:
      - Bearer: []
      summary: list project members
      tags:
      - project
  /project/{project_id}/invite/{username}:
    delete:
      parameters:
      - description: Project id
        in: path
        name: project_id
        required: true
        type: string
      - description: User name
        in: path
        name: username
        required: true
        type: string
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HttpErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HttpErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.HttpErr'
      security:
      - Bearer: []
      summary: delete user from project
      tags:
      - project
    post:
      parameters:
      - description: Project id
        in: path
        name: project_id
        required: true
        type: string
      - description: User name
        in: path
        name: username
        required: true
        type: string
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HttpErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HttpErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.HttpErr'
      security:
      - Bearer: []
      summary: invite to project
      tags:
      - project
  /service:
    post:
      consumes:
      - application/json
      parameters:
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: body
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.ServiceCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.OkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HttpErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HttpErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.HttpErr'
      security:
      - Bearer: []
      summary: create new service inside of project
      tags:
      - service
  /service/{service_id}/endpoint:
    post:
      consumes:
      - application/json
      parameters:
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: body
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.EndpointCreate'
      - description: Service Id
        in: path
        name: service_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.OkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HttpErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HttpErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.HttpErr'
      security:
      - Bearer: []
      summary: create new endpoint inside of service
      tags:
      - service
  /service/{service_id}/endpoint/{endpoint_id}/assign/{username}:
    post:
      consumes:
      - application/json
      parameters:
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: Service Id
        in: path
        name: service_id
        required: true
        type: string
      - description: Endpoint Id
        in: path
        name: endpoint_id
        required: true
        type: string
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.OkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HttpErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HttpErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.HttpErr'
      security:
      - Bearer: []
      summary: assign endpoint to contributor
      tags:
      - service
  /user/projects:
    get:
      parameters:
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ProjectView'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HttpErr'
      security:
      - Bearer: []
      summary: get list of user projects
      tags:
      - user
  /user/projects/{project_id}/endpoints:
    get:
      parameters:
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ProjectView'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HttpErr'
      security:
      - Bearer: []
      summary: get list of user endpoints inside given project
      tags:
      - user
  /user/projects/{project_id}/endpoints/{endpoint_id}:
    post:
      parameters:
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ProjectView'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HttpErr'
      security:
      - Bearer: []
      summary: submit completion of endpoint
      tags:
      - user
  /user/sign-in:
    post:
      consumes:
      - application/json
      parameters:
      - description: Logins existed user and returns access token
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserAuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HttpErr'
      summary: login existed user
      tags:
      - user
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
